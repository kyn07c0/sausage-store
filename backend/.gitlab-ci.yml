variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'  

stages:
  - build
  - test
  - release
  - deploy
   
build:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA

sonarqube-sast:
  stage: test
  image: maven:3.8-openjdk-16
  needs:
    - build
  only:
    changes:
    - backend/**/*  
  script:
    - cd backend
    - mvn verify sonar:sonar
      -Dsonar.projectKey=${SONAR_PROJECT_BACKEND_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACKEND}
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=17_ЮРИЙКРЫВИНЯ_БЭКЭНД     

spotbugs-sast:
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  needs:
    - build
    - spotbugs-sast
    - sonarqube-sast
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest

deploy:
  stage: deploy
  image: vault:1.11.3
  needs:
    - upload-backend-latest
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - scp docker-compose.yaml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store  
    - ssh ${DEV_USER}@${DEV_HOST} -t "cd /home/${DEV_USER}/sausage-store; bash --login;
       export VERSION=${VERSION};
       export SPRING_DATASOURCE_URL=${PSQL_DATASOURCE};
       export SPRING_DATASOURCE_USERNAME=${PSQL_USER};
       export SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD}; 
      /bin/bash -s " < ./backend/deploy.sh
